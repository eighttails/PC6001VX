/////////////////////////////////////////////////////////////////////////////
//  P C 6 0 0 1 V
//  Copyright 1999,2021 Yumitaro
/////////////////////////////////////////////////////////////////////////////
// Based on SLibrary.
/////////////////////////////////////////////////////////////////////////////
// This class is produced by AST. Check homepage when you need any help.
// Mail Address.    ast@qt-space.com
// Official HP URL. http://ast.qt-space.com/
/////////////////////////////////////////////////////////////////////////////
#include <iostream>

#include "thread.h"


/////////////////////////////////////////////////////////////////////////////
// Constructor
/////////////////////////////////////////////////////////////////////////////
cThread::cThread( void ) : m_bCancel( true ), m_BeginTheadParam( nullptr )
{
}


/////////////////////////////////////////////////////////////////////////////
// Destructor
/////////////////////////////////////////////////////////////////////////////
cThread::~cThread( void )
{
	this->Waiting();
}


/////////////////////////////////////////////////////////////////////////////
// スレッド開始
//
// 引数:	スレッドに渡すポインタ
// 返値:	true:成功 false:失敗
/////////////////////////////////////////////////////////////////////////////
bool cThread::BeginThread ( void* lpVoid )
{
	if( this->m_hThread.joinable() ) return false;
	
	this->m_BeginTheadParam = lpVoid;
	this->m_bCancel			= false;
	
	try{
		this->m_hThread = std::move( std::thread( this->ThreadProc, this ) );
		return true;
	}catch( std::system_error& ){
		return false;
	}
}


/////////////////////////////////////////////////////////////////////////////
// スレッド終了を待つ
//
// 引数:	なし
// 返値:	true:成功 false:失敗
/////////////////////////////////////////////////////////////////////////////
bool cThread::Waiting( void )
{
	if( !this->m_hThread.joinable() ) return true;
	
	try{
		this->m_hThread.join();
		return true;
	}catch( std::system_error& ){
		return false;
	}
}


/////////////////////////////////////////////////////////////////////////////
// スレッド終了要求
/////////////////////////////////////////////////////////////////////////////
void cThread::Cancel( void )
{
	std::lock_guard<std::mutex> lock( mtx );
	
	this->m_bCancel = true;
}


/////////////////////////////////////////////////////////////////////////////
// スレッド終了要求された？
//
// 引数:	なし
// 返値:	true:された false:されない
/////////////////////////////////////////////////////////////////////////////
bool cThread::IsCancel( void )
{
	std::lock_guard<std::mutex> lock( mtx );
	
	return this->m_bCancel;
}


/////////////////////////////////////////////////////////////////////////////
// デフォルトスレッド関数
/////////////////////////////////////////////////////////////////////////////
int cThread::ThreadProc( void* lpVoid )
{
	thread_local cThread* lpThis = static_cast<cThread*>( lpVoid );	// 自分自身のオブジェクトポインタ取得
	lpThis->OnThread( lpThis->m_BeginTheadParam );					// virtual Procedure 
	
	return 0;
}
